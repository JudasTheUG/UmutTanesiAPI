//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UmutTanesiAPI.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class UmutTanesiEntities : DbContext
    {
        public UmutTanesiEntities()
            : base("name=UmutTanesiEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ChatMessage> ChatMessages { get; set; }
        public virtual DbSet<HelpStatus> HelpStatus1 { get; set; }
        public virtual DbSet<Request> Requests { get; set; }
        public virtual DbSet<RequestType> RequestTypes { get; set; }
        public virtual DbSet<Users> Users1 { get; set; }
    
        public virtual ObjectResult<sp_match_Result> sp_match(Nullable<int> reqType, Nullable<int> help, Nullable<int> count, Nullable<System.DateTime> start, Nullable<System.DateTime> finish)
        {
            var reqTypeParameter = reqType.HasValue ?
                new ObjectParameter("reqType", reqType) :
                new ObjectParameter("reqType", typeof(int));
    
            var helpParameter = help.HasValue ?
                new ObjectParameter("help", help) :
                new ObjectParameter("help", typeof(int));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var finishParameter = finish.HasValue ?
                new ObjectParameter("finish", finish) :
                new ObjectParameter("finish", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_match_Result>("sp_match", reqTypeParameter, helpParameter, countParameter, startParameter, finishParameter);
        }
    
        public virtual int sp_message(Nullable<int> sender, Nullable<int> reciver, string message)
        {
            var senderParameter = sender.HasValue ?
                new ObjectParameter("sender", sender) :
                new ObjectParameter("sender", typeof(int));
    
            var reciverParameter = reciver.HasValue ?
                new ObjectParameter("reciver", reciver) :
                new ObjectParameter("reciver", typeof(int));
    
            var messageParameter = message != null ?
                new ObjectParameter("message", message) :
                new ObjectParameter("message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_message", senderParameter, reciverParameter, messageParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_chatters(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_chatters", idParameter);
        }
    
        public virtual ObjectResult<sp_getChat_Result> sp_getChat(Nullable<int> sender, Nullable<int> reciver)
        {
            var senderParameter = sender.HasValue ?
                new ObjectParameter("sender", sender) :
                new ObjectParameter("sender", typeof(int));
    
            var reciverParameter = reciver.HasValue ?
                new ObjectParameter("reciver", reciver) :
                new ObjectParameter("reciver", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getChat_Result>("sp_getChat", senderParameter, reciverParameter);
        }
    
        public virtual int sp_deleteChat(Nullable<int> sender, Nullable<int> reciver)
        {
            var senderParameter = sender.HasValue ?
                new ObjectParameter("sender", sender) :
                new ObjectParameter("sender", typeof(int));
    
            var reciverParameter = reciver.HasValue ?
                new ObjectParameter("reciver", reciver) :
                new ObjectParameter("reciver", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_deleteChat", senderParameter, reciverParameter);
        }
    }
}
